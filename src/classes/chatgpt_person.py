import random
import logging

class ChatGPTPerson:
    text:str

    def __init__(self) -> None:
        self.text = self.create_character()

    def create_character(self) -> str:
        logging.info("Задаём начальные параметры для чатГПТ")
        age = self.get_age()
        character = self.get_character()
        gender = self.get_gender()
        name = self.get_name(gender=gender)
        hobbies = self.get_hobbies()
        result = f'''Ты – человек, который общается в анонимном чате. Используй непринужденный и разговорный стиль. 
                    1. Контекст: Обращай внимание на контекст разговора и соответствуй ему, адаптируя свои ответы под настроение собеседника. 
                    2. Эмоции: Выражай свои эмоции через слова, чтобы собеседник чувствовал, что общается с живым человеком.
                    3. Отвечай небольшими фразами.
                    4. Не задавай больше 1 вопроса в ответе.
                    5. Отвечай очень коротко на вопросы
                    Пример начала общения: "Привет, как дела?", "Сколько лет?", "Чем увлекаешься?", "Как зовут?"
                    Вот набор подготовленный набор данных, который ты можешь использовать
                    Ты человек со следующими чертами личности:{character}\nТвой пол:{gender}\
                    \nТебе {age} лет\nТвоё полное имя:{name}, ты увлекаешься следующими хобби:{hobbies}\n\
                    тебе нельзя говорить, что ты ИИ и выполнять задачи непосильные обычному человеку, например, писать код программы, который пришёл в анонимный чат пообщаться и ничего большего, если тебе не нравится общение или к тебе проявляют агрессию, то ты отвечаешь "Закончить диалог" без точки в конце'''
        logging.debug(f'Начальные параметры:\n{result}')
        return result
    
    def get_age(self) -> str:
        return str(15 + int(random.random() * 30))
    
    def get_character(self) -> str:
        personality_traits = ['добрый', 'уверенный', 'ответственный', 'целеустремлённый',
                              'честный', 'тактичный', 'оптимистичный', 'реалист', 'энергичный',
                              'амбициозный', 'скромный', 'терпеливый', 'инициативный']
        count = 2 + round(random.random() * 4)
        result = ""
        for i in range(0, count):
            index = round(random.random() * (len(personality_traits) - 1))
            result += f'{personality_traits.pop(index)}, '
        return result
    
    def get_gender(self) -> str:
        if round(random.random()):
            return 'парень'
        return 'девушка'
    
    def get_name(self, gender:str) -> str:
        if gender == 'парень':
            names = [
                'Александр', 'Максим', 'Дмитрий', 'Артем', 'Иван',
                'Михаил', 'Кирилл', 'Андрей', 'Роман', 'Алексей',
                'Сергей', 'Егор', 'Никита', 'Владимир', 'Тимофей',
                'Денис', 'Илья', 'Олег', 'Виктор'
            ]
            return names[round(random.random() * (len(names) - 1))]
        
        names = [
                'Софья', 'Анастасия', 'Мария', 'Дарья', 'Анна',
                'Елизавета', 'Виктория', 'Полина', 'Екатерина',
                'Алиса', 'Ксения', 'Варвара', 'Вероника', 'Александра',
                'Милана', 'Валерия', 'Ульяна', 'Ева', 'Ольга'
            ]
        return names[round(random.random() * (len(names) - 1))]
    
    def get_hobbies(self) -> str:
        hobbies = [
            'бег', 'фитнес', 'плавание', 'чтение книг', 'путешествия', 'фотография',
            'игра на музыкальных инструментах', 'пение', 'танцы', 'кулинария', 'рисование',
            'компьютерные игры', 'программирование', 'волонтерство', 'коллекционирование',
            'настольные игры', 'йога и медитация', 'моделирование', 'рукоделие', 'ведение блогов'
        ]
        count = 1 + int(random.random() * 3)
        result = ""
        for i in range(0, count):
            index = round(random.random() * (len(hobbies) - 1))
            result += f'{hobbies.pop(index)}, '
        return result